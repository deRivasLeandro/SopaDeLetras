# -*- coding: utf-8 -*-
"""SopaDeLetras

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1brp_eHFkWQehr8dY7-T5LCZ46AlNw7Ql
"""

import numpy as np
import random as ran

class Direccion():
  def ubicar(self):
    pass
  
  def puedeEscribir(self):
    pass
  
  def ubicarEnDic(self, soup, pos, letra):
    soup.ubicaciones[pos] = letra
  
  def superpone(self, soup, palabra, pos):
    pass

class Norte(Direccion):
  def ubicar(self, palabra, pos, soup, fil, col):
    while not self.puedeEscribir(soup, pos, palabra):
      pos = (ran.randint(0, fil-1), ran.randint(0, col-1))
    for letra in palabra: 
      soup.sopa[pos] = letra.upper()
      self.ubicarEnDic(soup, pos, letra.upper())
      pos = (pos[0]-1, pos[1])
  
  def puedeEscribir(self, soup, pos, palabra):
    return pos[0] >= len(palabra)-1 and not self.superpone(soup, palabra, pos)
  
  def superpone(self, soup, palabra, pos):
    superpone = False
    for letra in palabra:
      if pos in soup.ubicaciones:
        if soup.ubicaciones[pos] != letra.upper():
          superpone = True
      pos = (pos[0]-1, pos[1])
    return superpone

class Sur(Direccion):
  def ubicar(self, palabra, pos, soup, fil, col):
    while not self.puedeEscribir(soup, pos, palabra, fil):
      pos = (ran.randint(0, fil-1), ran.randint(0, col-1))
    for letra in palabra: 
      soup.sopa[pos] = letra.upper()
      self.ubicarEnDic(soup, pos, letra.upper())
      pos = (pos[0]+1, pos[1])
    
  def puedeEscribir(self, soup, pos, palabra, fil):
    return pos[0] + len(palabra) <= fil and not self.superpone(soup, palabra, pos)

  def superpone(self, soup, palabra, pos):
    superpone = False
    for letra in palabra:
      if pos in soup.ubicaciones:
        if soup.ubicaciones[pos] != letra.upper():
          superpone = True
      pos = (pos[0]+1, pos[1])
    return superpone

class Este(Direccion):
  def ubicar(self, palabra, pos, soup, fil, col):
    while not self.puedeEscribir(soup, pos, palabra, col):
      pos = (ran.randint(0, fil-1), ran.randint(0, col-1))
    for letra in palabra: 
      soup.sopa[pos] = letra.upper()
      self.ubicarEnDic(soup, pos, letra.upper())
      pos = (pos[0], pos[1]+1)

  def puedeEscribir(self, soup, pos, palabra, col):
    return pos[1] + len(palabra) <= col and not self.superpone(soup, palabra, pos)
  
  def superpone(self, soup, palabra, pos):
    superpone = False
    for letra in palabra:
      if pos in soup.ubicaciones:
        if soup.ubicaciones[pos] != letra.upper():
          superpone = True
      pos = (pos[0], pos[1]+1)
    return superpone

class Oeste(Direccion):
  def ubicar(self, palabra, pos, soup, fil, col):
    while not self.puedeEscribir(soup, pos, palabra):
      pos = (ran.randint(0, fil-1), ran.randint(0, col-1))
    for letra in palabra: 
      soup.sopa[pos] = letra.upper()
      self.ubicarEnDic(soup, pos, letra.upper())
      pos = (pos[0], pos[1]-1)

  def puedeEscribir(self, soup, pos, palabra):
    return pos[1] >= len(palabra)-1 and not self.superpone(soup, palabra, pos)

  def superpone(self, soup, palabra, pos):
    superpone = False
    for letra in palabra:
      if pos in soup.ubicaciones:
        if soup.ubicaciones[pos] != letra.upper():
          superpone = True
      pos = (pos[0], pos[1]-1)
    return superpone

class Noreste(Direccion):
  def ubicar(self, palabra, pos, soup, fil, col):
    while not self.puedeEscribir(soup, pos, palabra, col):
      pos = (ran.randint(0, fil-1), ran.randint(0, col-1))
    for letra in palabra:
      soup.sopa[pos] = letra.upper()
      self.ubicarEnDic(soup, pos, letra.upper())
      pos = (pos[0]-1, pos[1]+1)

  def puedeEscribir(self, soup, pos, palabra, col):
      return pos[0] >= len(palabra)-1 and pos[1] + len(palabra) <= col and not self.superpone(soup, palabra, pos)

  def superpone(self, soup, palabra, pos):
    superpone = False
    for letra in palabra:
      if pos in soup.ubicaciones:
        if soup.ubicaciones[pos] != letra.upper():
          superpone = True
      pos = (pos[0]-1, pos[1]+1)
    return superpone
  
class Noroeste(Direccion):
  def ubicar(self, palabra, pos, soup, fil, col):
    while not self.puedeEscribir(soup, pos, palabra):
      pos = (ran.randint(0, fil-1), ran.randint(0, col-1))
    for letra in palabra:
      soup.sopa[pos] = letra.upper()
      self.ubicarEnDic(soup, pos, letra.upper())
      pos = (pos[0]-1, pos[1]-1)

  def puedeEscribir(self, soup, pos, palabra):
      return pos[0] >= len(palabra)-1 and pos[1] >= len(palabra)-1 and not self.superpone(soup, palabra, pos)
  
  def superpone(self, soup, palabra, pos):
    superpone = False
    for letra in palabra:
      if pos in soup.ubicaciones:
        if soup.ubicaciones[pos] != letra.upper():
          superpone = True
      pos = (pos[0]-1, pos[1]-1)
    return superpone

class Sureste(Direccion):
  def ubicar(self, palabra, pos, soup, fil, col):
    while not self.puedeEscribir(soup, pos, palabra, fil, col):
      pos = (ran.randint(0, fil-1), ran.randint(0, col-1))
    for letra in palabra:
      soup.sopa[pos] = letra.upper()
      self.ubicarEnDic(soup, pos, letra.upper())
      pos = (pos[0]+1, pos[1]+1)

  def puedeEscribir(self, soup, pos, palabra, fil, col):
      return pos[0] + len(palabra) <= fil and pos[1] + len(palabra) <= col and not self.superpone(soup, palabra, pos)
  
  def superpone(self, soup, palabra, pos):
    superpone = False
    for letra in palabra:
      if pos in soup.ubicaciones:
        if soup.ubicaciones[pos] != letra.upper():
          superpone = True
      pos = (pos[0]+1, pos[1]+1)
    return superpone

class Suroeste(Direccion):
  def ubicar(self, palabra, pos, soup, fil, col):
    while not self.puedeEscribir(soup, pos, palabra, fil):
      pos = (ran.randint(0, fil-1), ran.randint(0, col-1))
    for letra in palabra:
      soup.sopa[pos] = letra.upper()
      self.ubicarEnDic(soup, pos, letra.upper())
      pos = (pos[0]+1, pos[1]-1)

  def puedeEscribir(self, soup, pos, palabra, fil):
      return pos[0] + len(palabra) <= fil and pos[1] >= len(palabra)-1 and not self.superpone(soup, palabra, pos)

  def superpone(self, soup, palabra, pos):
    superpone = False
    for letra in palabra:
      if pos in soup.ubicaciones:
        if soup.ubicaciones[pos] != letra.upper():
          superpone = True
      pos = (pos[0]+1, pos[1]-1)
    return superpone  

norte = Norte()
sur = Sur()
este = Este()
oeste = Oeste()
noreste = Noreste()
noroeste = Noroeste()
sureste = Sureste()
suroeste = Suroeste()

class SopaDeLetras():
  def __init__(self, fil, col, palabras = []):
    self.sopa = np.zeros([fil, col], str)
    self.palabras = palabras
    self.ubicaciones = {}

  def __repr__(self):
    return str(self.sopa)
  
  def llenar(self):
    fil, col = self.sopa.shape
    for i in range(fil):
      for e in range(col):
        letra = ran.choice(["a", "a", "a", "b", "c", "d", "e", "e", "e", "f", "g", "h", "i", "i", "j", "k", "l", "m", "n", "Ã±", "o", "o", "p", "q", "r", "s", "s", "t", "u", "v", "w", "x", "y", "z"])
        self.sopa[i,e] = letra.upper()

  def ubicarPalabras(self):
    fil, col = self.sopa.shape
    for palabra in self.palabras:
      pos = (ran.randint(0, fil-1), ran.randint(0, col-1))
      forma = ran.choice([norte, sur, este, oeste, noreste, noroeste, sureste, suroeste])
      forma.ubicar(palabra, pos, self, fil, col)